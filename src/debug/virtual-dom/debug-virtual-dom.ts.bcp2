import { createVirtualDOMError } from './virtual-dom-error/create-virtual-dom-error';
import { IEmitFunction } from '../observables-v5/types';
import { createListenerBuilderFunctions } from '../observables-v5/misc/event-listener/build-event-listener';

// const a: HTMLElement;
// a.remove();


export function createVirtualDOMErrorForMissingParent(node?: VirtualNode) {
  return createVirtualDOMError({ message: `Has no parent node`, node });
}

export function createVirtualDOMErrorForHavingParent(node?: VirtualNode) {
  return createVirtualDOMError({ message: `Has a parent node`, node });
}

export function createVirtualDOMErrorForReferenceNodeNotHavingParent(node?: VirtualNode) {
  return createVirtualDOMError({ message: `referenceNode is not a child of this node`, node });
}

export function createVirtualDOMErrorForChildNodeParentOfThisNode(node?: VirtualNode) {
  return createVirtualDOMError({ message: `childNode is a parent this node`, node });
}

/*----*/

export class VirtualNode {
  _previousNode: VirtualNode | null; // redundant
  _nextNode: VirtualNode | null;
  _parentNode: VirtualParentNode | null;

  _uuid: string; // TODO DEBUG ONLY

  constructor() {
    this._previousNode = null;
    this._nextNode = null;
    this._parentNode = null;
    this._uuid = (Math.random() * Number.MAX_SAFE_INTEGER).toString(16).padStart(14, '0'); // TODO DEBUG ONLY
  }


  getPreviousNode(): VirtualNode | null {
    return this._previousNode;
  }

  getNextNode(): VirtualNode | null {
    return this._nextNode;
  }

  getParentNode(): VirtualNode | null {
    return this._parentNode;
  }

  remove(): void {
    if (this._parentNode === null) {
      throw createVirtualDOMErrorForMissingParent(this);
    } else {
      // previous
      if (this._previousNode === null) { // is first child
        this._parentNode._firstChild = this._nextNode; // if node is the first child of it's parent, we must update it's parent's first child
      } else {
        this._previousNode._nextNode = this._nextNode;
      }
      this._previousNode = null;

      // next
      if (this._nextNode === null) { // is last child
        this._parentNode._lastChild = this._previousNode;
      } else {
        this._nextNode._previousNode = this._previousNode;
      }
      this._nextNode = null;

      this._parentNode = null;
    }
  }


  /*---*/

  after(...nodes: VirtualNode[]): void {
    if (this._parentNode === null) {
      throw createVirtualDOMErrorForMissingParent(this);
    } else {
      for (let i = nodes.length - 1; i >= 0; i--) {
        this._parentNode.insertBefore(nodes[i], this._nextNode);
      }
    }
  }

  before(...nodes: VirtualNode[]): void {
    if (this._parentNode === null) {
      throw createVirtualDOMErrorForMissingParent(this);
    } else {
      for (let i = 0, l = nodes.length; i < l; i++) {
        this._parentNode.insertBefore(nodes[i], this);
      }
    }
  }

  replaceWith(...nodes: VirtualNode[]): void {
    if (this._parentNode === null) {
      throw createVirtualDOMErrorForMissingParent(this);
    } else {
      for (let i = 0, l = nodes.length; i < l; i++) {
        this._parentNode.insertBefore(nodes[i], this);
      }
      this.remove();
    }
  }

  /*---*/

  hasParentNode(): boolean {
    return this._parentNode != null;
  }
}

export function isVirtualNode(value: any): value is VirtualNode {
  return value instanceof VirtualNode;
}


/*----*/

export interface IVirtualParentNodeGetChildrenOptions {
  asc?: boolean; // (default: true)
  deep?: boolean; // (default: true)
}

export class VirtualParentNode extends VirtualNode {
  _firstChild: VirtualNode | null;
  _lastChild: VirtualNode | null; // redundant


  constructor() {
    super();
    this._firstChild = null;
    this._lastChild = null;
  }

  getFirstChild(): VirtualNode | null {
    return this._firstChild;
  }

  getLastChild(): VirtualNode | null {
    return this._lastChild;
  }


  /**
   * Inserts 'childNode' after 'referenceNode'
   *  - if 'referenceNode' is null or undefined, 'childNode' is inserted as first element
   */
  insertBefore(
    childNode: VirtualNode,
    referenceNode: VirtualNode | null = null,
  ): void {
    if (childNode._parentNode === null) {
      if (
        isVirtualParentNode(childNode)
        && childNode.hasChildDeep(this)
      ) {
        throw createVirtualDOMErrorForChildNodeParentOfThisNode(this);
      } else {
        if (referenceNode === null) { // insert node as last element
          if (this._lastChild === null) { // this node is empty
            this._firstChild = childNode;
          } else { // this node has some children
            this._lastChild._nextNode = childNode;
            childNode._previousNode = this._lastChild;
          }
          this._lastChild = childNode;
        } else if (referenceNode._parentNode === this) { // ensures that referenceNode is a child of this node
          // here we are sure that this node has some children

          // previous
          if (referenceNode._previousNode === null) { // referenceNode is first child
            this._firstChild = childNode; // if referenceNode is the first child of it's parent (this), we must update it's parent's (this) first child
          } else {
            referenceNode._previousNode._nextNode = childNode;
          }
          referenceNode._previousNode = childNode;

          // next
          childNode._nextNode = referenceNode;
        } else {
          throw createVirtualDOMErrorForReferenceNodeNotHavingParent(this);
        }

        childNode._parentNode = this;
      }
    } else {
      throw createVirtualDOMErrorForHavingParent(childNode);
    }
  }


  /*---*/

  insertAfter(
    childNode: VirtualNode,
    referenceNode: VirtualNode | null = null,
  ): void {
    return this.insertBefore(
      childNode,
      (referenceNode === null)
        ? this._firstChild
        : referenceNode._nextNode
    );
  }


  append(...nodes: VirtualNode[]): void {
    for (let i = 0, l = nodes.length; i < l; i++) {
      this.insertBefore(nodes[i], null);
    }
  }

  prepend(...nodes: VirtualNode[]): void {
    for (let i = nodes.length - 1; i >= 0; i--) {
      this.insertBefore(nodes[i], this._firstChild);
    }
  }

  /*---*/

  hasChildren(): boolean {
    return this._firstChild !== null;
  }

  hasChild(child: VirtualNode): boolean {
    return child._parentNode === this;
  }

  hasChildDeep(child: VirtualNode | null): boolean {
    while (child !== null) {
      if (child._parentNode === this) {
        return true;
      } else {
        child = child._parentNode;
      }
    }
    return false;
  }

  // alias of hasChildDeep
  contains(child: VirtualNode | null): boolean {
    return this.hasChildDeep(child);
  }

  /*---*/

  getChildren(
    {
      asc = true,
      deep = true
    }: IVirtualParentNodeGetChildrenOptions = {}
  ): Generator<VirtualNode, void, void> {
    return asc
      ? (
        deep
          ? this.getChildrenDeepAsc()
          : this.getChildrenAsc()
      )
      : (
        deep
          ? this.getChildrenDeepDesc()
          : this.getChildrenDesc()
      );
  }

  * getChildrenAsc(): Generator<VirtualNode, void, void> {
    let node: VirtualNode | null = this._firstChild;
    while (node !== null) {
      yield node;
      node = node._nextNode;
    }
  }

  * getChildrenDeepAsc(): Generator<VirtualNode, void, void> {
    const iterator: Iterator<VirtualNode> = this.getChildrenAsc();
    let result: IteratorResult<VirtualNode>;
    while (!(result = iterator.next()).done) {
      yield result.value;
      if (isVirtualParentNode(result.value)) {
        yield * result.value.getChildrenDeepAsc();
      }
    }
  }

  * getChildrenDesc(): Generator<VirtualNode, void, void> {
    let node: VirtualNode | null = this._lastChild;
    while (node !== null) {
      yield node;
      node = node._previousNode;
    }
  }

  * getChildrenDeepDesc(): Generator<VirtualNode, void, void> {
    const iterator: Iterator<VirtualNode> = this.getChildrenDesc();
    let result: IteratorResult<VirtualNode>;
    while (!(result = iterator.next()).done) {
      yield result.value;
      if (isVirtualParentNode(result.value)) {
        yield * result.value.getChildrenDeepDesc();
      }
    }
  }
}


export function isVirtualParentNode(value: any): value is VirtualParentNode {
  return value instanceof VirtualParentNode;
}

/*----*/

export interface IVirtualDOMNode<GNode extends Node> {
  getDOMNode(): GNode;
}

export function isVirtualDOMNode<GNode extends Node>(value: any): value is IVirtualDOMNode<GNode> {
  return (typeof value.getDOMNode === 'function');
}

/*--*/

export class VirtualTextNode extends VirtualNode {

  _value: string;

  constructor(value?: string) {
    super();
    this._value = '';
    if (value !== void 0) {
      this.setValue(value);
    }
  }

  getValue(): string {
    return this._value;
  }

  setValue(value: string): void {
    this._value = value;
  }
}

export class VirtualDOMTextNode extends VirtualTextNode implements IVirtualDOMNode<Text> {

  _node: Text;

  constructor(value?: string) {
    super(value);
    this._node = new Text();
  }

  getDOMNode(): Text {
    return this._node;
  }

  remove(): void {
    super.remove();
    this._node.remove();
  }

  setValue(value: string): void {
    super.setValue(value);
    this._node.data = value;
  }
}


/*----*/

export class VirtualElementNode extends VirtualParentNode {
  _attributes: Map<string, string>;

  constructor() {
    super();
    this._attributes = new Map<string, string>();
  }

  getAttribute(
    name: string,
  ): string | null {
    return this._attributes.has(name)
      ? this._attributes.get(name) as string
      : null;
  }

  setAttribute(
    name: string,
    value: string | null,
  ): void {
    if (value === null) {
      this._attributes.delete(name);
    } else {
      this._attributes.set(name, value);
    }
  }

  /*---*/

  hasAttribute(
    name: string,
  ): boolean {
    return this._attributes.has(name);
  }

  removeAttribute(
    name: string,
  ): void {
    this.setAttribute(name, null);
  }

  toggleAttribute(
    name: string,
    force: boolean = !this.hasAttribute(name),
  ): void {
    this.setAttribute(name, force ? '' : null);
  }

}


export class VirtualDOMElementNode<GElement extends Element> extends VirtualElementNode {

  _node: GElement;

  constructor(node: GElement) {
    super();
    this._node = node;
  }

  getDOMNode(): GElement {
    return this._node;
  }

  setAttribute(
    name: string,
    value: string | null,
  ): void {
    super.setAttribute(name, value);
    if (value === null) {
      this._node.removeAttribute(name);
    } else {
      this._node.setAttribute(name, value);
    }
  }


  remove(): void {
    super.remove();
    this._node.remove();
  }

  insertBefore(
    childNode: VirtualNode,
    referenceNode: VirtualNode | null = null,
  ) {
    super.insertBefore(childNode, referenceNode);
    // this._node.insertBefore(); // TODO
  }
}

/*----*/

export class VirtualContainerNode extends VirtualParentNode {

  constructor() {
    super();
  }

  insertBefore(
    childNode: VirtualNode,
    referenceNode: VirtualNode | null = null,
  ) {
    super.insertBefore(childNode, referenceNode);
  }

  remove(): void {
    super.remove();
    // const iterator: Iterator<VirtualNode> = this.getChildrenAsc();
    // let result: IteratorResult<VirtualNode>;
    // while (!(result = iterator.next()).done) {
    //   result.value.
    // }
  }
}

/*---------------*/

/*
SYNTAX:

<div *let="data = data.observable">
  ...content
</div>

=>

let previousNode = createComment('*let="data = data.observable"');
subscribe(data.observable, (data) => {
  const node = createElement('div');
  replaceNode(previousNode, node);
  // ... insert content
));

 */

/*----------------------------------------------------------------------------------------------------*/

/** ATTACH **/

const ON_LIGHT_VIRTUAL_NODE_ATTACHED_LISTENERS = new WeakMap<Node, IEmitFunction<void>[]>();

export const {
  listener: nodeAttachedListener,
  dispatch: dispatchNodeAttached,
} = createListenerBuilderFunctions(ON_LIGHT_VIRTUAL_NODE_ATTACHED_LISTENERS);

export function attachNode(
  node: Node,
  parentNode: Node,
  referenceNope: Node | null,
): void {
  parentNode.insertBefore(node, referenceNope);
  dispatchNodeAttached(node);
}

export function attachLightVirtualNode(
  parent: LightVirtualParentNode,
  child: LightVirtualNode,
  index: number,
): void {
  parent.children.splice(child, );
}

/*---*/

export class LightVirtualNode {
}


export class LightVirtualParentNode {
  children: LightVirtualNode[] = [];
}


/*---------------*/


export async function debugVirtualDOM() {

  const parent = new VirtualParentNode();
  const child1 = new VirtualNode();
  const child2 = new VirtualNode();

  parent.insertBefore(child1);
  parent.insertBefore(child2);

  console.log(parent, child1, child2, Array.from(parent.getChildren()));
}

